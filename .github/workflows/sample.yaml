name:  FastAPI App CI/CD Pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      # Ruff Linter Test
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - uses: chartboost/ruff-action@v1
        with:
          src: ./src
          version: 0.1.6
      # Install Library
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set up for FastAPI APP
        run: |
            export SUPABASE_URL=$SUPABASE_URL
            export UPSTASH_REDIS_REST_HOST=$UPSTASH_REDIS_REST_HOST
            export UPSTASH_REDIS_REST_PORT=$UPSTASH_REDIS_REST_PORT
        shell: bash
      - name: Set up AWS
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region ap-northeast-1                        
      - name: Start FastAPI application
        run: |
          uvicorn src.main:app --host 127.0.0.1 --port 8001 --reload &
        shell: bash
      - name: Wait for application to start
        run: |
          timeout=10
          until echo -n | telnet 127.0.0.1 8001 > /dev/null 2>&1 || ((timeout-- <= 0)); do sleep 1; done
          if [ "$timeout" -eq 0 ]; then exit 1; fi
      # Endpoint test by stepci      
      - name: Install stepci
        uses: actions/checkout@v4
      - run: |
          npm install -g stepci
          export PATH="$PATH:$(npm bin -g)"    
      - name: Run stepci
        run: stepci run ./tests/workflow.yml                       
      - name: Build and Push Docker Image
        run: |
          cd ${{ github.workspace }}
          docker build -t fastapi-lambda-repo . --no-cache
          docker tag fastapi-lambda-repo:latest $AWS_REGISTRY_URL:latest
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin $ACCOUNTID.dkr.ecr.ap-northeast-1.amazonaws.com
          docker push $AWS_REGISTRY_URL:latest       
      - name: Update Lambda function
        run: |
          aws lambda update-function-code --function-name $FASTAPI_LAMBDA_FUNCTION_NAME --image-uri $AWS_REGISTRY_URL:latest     
      - run: echo "🍏 This job's status is ${{ job.status }}."
    env:
      ACCOUNTID: ${{ secrets.ACCOUNTID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGISTRY_URL: ${{ secrets.AWS_REGISTRY_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      UPSTASH_REDIS_REST_HOST: ${{ secrets.UPSTASH_REDIS_REST_HOST }}
      UPSTASH_REDIS_REST_PORT: ${{ secrets.UPSTASH_REDIS_REST_PORT }}
      FASTAPI_LAMBDA_FUNCTION_NAME: ${{ vars.FASTAPI_LAMBDA_FUNCTION_NAME }}